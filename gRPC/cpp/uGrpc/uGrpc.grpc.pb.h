// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: uGrpc.proto
#ifndef GRPC_uGrpc_2eproto__INCLUDED
#define GRPC_uGrpc_2eproto__INCLUDED

#include "uGrpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace uGrpc {

// Interface exported by the server.
class UGrpc final {
 public:
  static constexpr char const* service_full_name() {
    return "uGrpc.UGrpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetUResponse(::grpc::ClientContext* context, const ::uGrpc::UArgs& request, ::uGrpc::UResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uGrpc::UResponse>> AsyncGetUResponse(::grpc::ClientContext* context, const ::uGrpc::UArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uGrpc::UResponse>>(AsyncGetUResponseRaw(context, request, cq));
    }
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::uGrpc::UResponse>> ListUResponses(::grpc::ClientContext* context, const ::uGrpc::EmbUArgs& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::uGrpc::UResponse>>(ListUResponsesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::uGrpc::UResponse>> AsyncListUResponses(::grpc::ClientContext* context, const ::uGrpc::EmbUArgs& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::uGrpc::UResponse>>(AsyncListUResponsesRaw(context, request, cq, tag));
    }
    // A client-to-server streaming RPC.
    //
    // Accepts a stream of Points on a route being traversed, returning a
    // RouteSummary when traversal is completed.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::uGrpc::EmbUArgs>> RecordRoute(::grpc::ClientContext* context, ::uGrpc::EmbUResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::uGrpc::EmbUArgs>>(RecordRouteRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::uGrpc::EmbUArgs>> AsyncRecordRoute(::grpc::ClientContext* context, ::uGrpc::EmbUResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::uGrpc::EmbUArgs>>(AsyncRecordRouteRaw(context, response, cq, tag));
    }
    // A Bidirectional streaming RPC.
    //
    // Accepts a stream of RouteNotes sent while a route is being traversed,
    // while receiving other RouteNotes (e.g. from other users).
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>> RouteChat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>>(RouteChatRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>> AsyncRouteChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>>(AsyncRouteChatRaw(context, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uGrpc::UResponse>* AsyncGetUResponseRaw(::grpc::ClientContext* context, const ::uGrpc::UArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::uGrpc::UResponse>* ListUResponsesRaw(::grpc::ClientContext* context, const ::uGrpc::EmbUArgs& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::uGrpc::UResponse>* AsyncListUResponsesRaw(::grpc::ClientContext* context, const ::uGrpc::EmbUArgs& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::uGrpc::EmbUArgs>* RecordRouteRaw(::grpc::ClientContext* context, ::uGrpc::EmbUResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::uGrpc::EmbUArgs>* AsyncRecordRouteRaw(::grpc::ClientContext* context, ::uGrpc::EmbUResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>* RouteChatRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>* AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetUResponse(::grpc::ClientContext* context, const ::uGrpc::UArgs& request, ::uGrpc::UResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uGrpc::UResponse>> AsyncGetUResponse(::grpc::ClientContext* context, const ::uGrpc::UArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uGrpc::UResponse>>(AsyncGetUResponseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::uGrpc::UResponse>> ListUResponses(::grpc::ClientContext* context, const ::uGrpc::EmbUArgs& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::uGrpc::UResponse>>(ListUResponsesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::uGrpc::UResponse>> AsyncListUResponses(::grpc::ClientContext* context, const ::uGrpc::EmbUArgs& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::uGrpc::UResponse>>(AsyncListUResponsesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::uGrpc::EmbUArgs>> RecordRoute(::grpc::ClientContext* context, ::uGrpc::EmbUResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::uGrpc::EmbUArgs>>(RecordRouteRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::uGrpc::EmbUArgs>> AsyncRecordRoute(::grpc::ClientContext* context, ::uGrpc::EmbUResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::uGrpc::EmbUArgs>>(AsyncRecordRouteRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>> RouteChat(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>>(RouteChatRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>> AsyncRouteChat(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>>(AsyncRouteChatRaw(context, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::uGrpc::UResponse>* AsyncGetUResponseRaw(::grpc::ClientContext* context, const ::uGrpc::UArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::uGrpc::UResponse>* ListUResponsesRaw(::grpc::ClientContext* context, const ::uGrpc::EmbUArgs& request) override;
    ::grpc::ClientAsyncReader< ::uGrpc::UResponse>* AsyncListUResponsesRaw(::grpc::ClientContext* context, const ::uGrpc::EmbUArgs& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientWriter< ::uGrpc::EmbUArgs>* RecordRouteRaw(::grpc::ClientContext* context, ::uGrpc::EmbUResponse* response) override;
    ::grpc::ClientAsyncWriter< ::uGrpc::EmbUArgs>* AsyncRecordRouteRaw(::grpc::ClientContext* context, ::uGrpc::EmbUResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientReaderWriter< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>* RouteChatRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>* AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_GetUResponse_;
    const ::grpc::RpcMethod rpcmethod_ListUResponses_;
    const ::grpc::RpcMethod rpcmethod_RecordRoute_;
    const ::grpc::RpcMethod rpcmethod_RouteChat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status GetUResponse(::grpc::ServerContext* context, const ::uGrpc::UArgs* request, ::uGrpc::UResponse* response);
    // A server-to-client streaming RPC.
    //
    // Obtains the Features available within the given Rectangle.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the rectangle may cover a large area and contain a
    // huge number of features.
    virtual ::grpc::Status ListUResponses(::grpc::ServerContext* context, const ::uGrpc::EmbUArgs* request, ::grpc::ServerWriter< ::uGrpc::UResponse>* writer);
    // A client-to-server streaming RPC.
    //
    // Accepts a stream of Points on a route being traversed, returning a
    // RouteSummary when traversal is completed.
    virtual ::grpc::Status RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::uGrpc::EmbUArgs>* reader, ::uGrpc::EmbUResponse* response);
    // A Bidirectional streaming RPC.
    //
    // Accepts a stream of RouteNotes sent while a route is being traversed,
    // while receiving other RouteNotes (e.g. from other users).
    virtual ::grpc::Status RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::uGrpc::EmbUResponse, ::uGrpc::EmbUArgs>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetUResponse() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetUResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUResponse(::grpc::ServerContext* context, const ::uGrpc::UArgs* request, ::uGrpc::UResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUResponse(::grpc::ServerContext* context, ::uGrpc::UArgs* request, ::grpc::ServerAsyncResponseWriter< ::uGrpc::UResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListUResponses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListUResponses() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListUResponses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUResponses(::grpc::ServerContext* context, const ::uGrpc::EmbUArgs* request, ::grpc::ServerWriter< ::uGrpc::UResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUResponses(::grpc::ServerContext* context, ::uGrpc::EmbUArgs* request, ::grpc::ServerAsyncWriter< ::uGrpc::UResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RecordRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RecordRoute() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RecordRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::uGrpc::EmbUArgs>* reader, ::uGrpc::EmbUResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecordRoute(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::uGrpc::EmbUResponse, ::uGrpc::EmbUArgs>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RouteChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RouteChat() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RouteChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::uGrpc::EmbUResponse, ::uGrpc::EmbUArgs>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRouteChat(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::uGrpc::EmbUResponse, ::uGrpc::EmbUArgs>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetUResponse<WithAsyncMethod_ListUResponses<WithAsyncMethod_RecordRoute<WithAsyncMethod_RouteChat<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetUResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetUResponse() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetUResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUResponse(::grpc::ServerContext* context, const ::uGrpc::UArgs* request, ::uGrpc::UResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListUResponses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListUResponses() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListUResponses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUResponses(::grpc::ServerContext* context, const ::uGrpc::EmbUArgs* request, ::grpc::ServerWriter< ::uGrpc::UResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RecordRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RecordRoute() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RecordRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::uGrpc::EmbUArgs>* reader, ::uGrpc::EmbUResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RouteChat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RouteChat() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RouteChat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::uGrpc::EmbUResponse, ::uGrpc::EmbUArgs>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUResponse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetUResponse() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::uGrpc::UArgs, ::uGrpc::UResponse>(std::bind(&WithStreamedUnaryMethod_GetUResponse<BaseClass>::StreamedGetUResponse, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetUResponse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUResponse(::grpc::ServerContext* context, const ::uGrpc::UArgs* request, ::uGrpc::UResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUResponse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uGrpc::UArgs,::uGrpc::UResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetUResponse<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListUResponses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ListUResponses() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::SplitServerStreamingHandler< ::uGrpc::EmbUArgs, ::uGrpc::UResponse>(std::bind(&WithSplitStreamingMethod_ListUResponses<BaseClass>::StreamedListUResponses, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListUResponses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListUResponses(::grpc::ServerContext* context, const ::uGrpc::EmbUArgs* request, ::grpc::ServerWriter< ::uGrpc::UResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListUResponses(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::uGrpc::EmbUArgs,::uGrpc::UResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListUResponses<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetUResponse<WithSplitStreamingMethod_ListUResponses<Service > > StreamedService;
};

}  // namespace uGrpc


#endif  // GRPC_uGrpc_2eproto__INCLUDED
