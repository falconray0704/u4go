// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: uGrpc.proto

#include "uGrpc.pb.h"
#include "uGrpc.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace uGrpc {

static const char* UGrpc_method_names[] = {
  "/uGrpc.UGrpc/GetUResponse",
  "/uGrpc.UGrpc/ListUResponses",
  "/uGrpc.UGrpc/RecordRoute",
  "/uGrpc.UGrpc/RouteChat",
};

std::unique_ptr< UGrpc::Stub> UGrpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< UGrpc::Stub> stub(new UGrpc::Stub(channel));
  return stub;
}

UGrpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetUResponse_(UGrpc_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUResponses_(UGrpc_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RecordRoute_(UGrpc_method_names[2], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_RouteChat_(UGrpc_method_names[3], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status UGrpc::Stub::GetUResponse(::grpc::ClientContext* context, const ::uGrpc::UArgs& request, ::uGrpc::UResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetUResponse_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::uGrpc::UResponse>* UGrpc::Stub::AsyncGetUResponseRaw(::grpc::ClientContext* context, const ::uGrpc::UArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::uGrpc::UResponse>::Create(channel_.get(), cq, rpcmethod_GetUResponse_, context, request);
}

::grpc::ClientReader< ::uGrpc::UResponse>* UGrpc::Stub::ListUResponsesRaw(::grpc::ClientContext* context, const ::uGrpc::EmbUArgs& request) {
  return new ::grpc::ClientReader< ::uGrpc::UResponse>(channel_.get(), rpcmethod_ListUResponses_, context, request);
}

::grpc::ClientAsyncReader< ::uGrpc::UResponse>* UGrpc::Stub::AsyncListUResponsesRaw(::grpc::ClientContext* context, const ::uGrpc::EmbUArgs& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::uGrpc::UResponse>::Create(channel_.get(), cq, rpcmethod_ListUResponses_, context, request, tag);
}

::grpc::ClientWriter< ::uGrpc::EmbUArgs>* UGrpc::Stub::RecordRouteRaw(::grpc::ClientContext* context, ::uGrpc::EmbUResponse* response) {
  return new ::grpc::ClientWriter< ::uGrpc::EmbUArgs>(channel_.get(), rpcmethod_RecordRoute_, context, response);
}

::grpc::ClientAsyncWriter< ::uGrpc::EmbUArgs>* UGrpc::Stub::AsyncRecordRouteRaw(::grpc::ClientContext* context, ::uGrpc::EmbUResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncWriter< ::uGrpc::EmbUArgs>::Create(channel_.get(), cq, rpcmethod_RecordRoute_, context, response, tag);
}

::grpc::ClientReaderWriter< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>* UGrpc::Stub::RouteChatRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>(channel_.get(), rpcmethod_RouteChat_, context);
}

::grpc::ClientAsyncReaderWriter< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>* UGrpc::Stub::AsyncRouteChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>::Create(channel_.get(), cq, rpcmethod_RouteChat_, context, tag);
}

UGrpc::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      UGrpc_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< UGrpc::Service, ::uGrpc::UArgs, ::uGrpc::UResponse>(
          std::mem_fn(&UGrpc::Service::GetUResponse), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      UGrpc_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< UGrpc::Service, ::uGrpc::EmbUArgs, ::uGrpc::UResponse>(
          std::mem_fn(&UGrpc::Service::ListUResponses), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      UGrpc_method_names[2],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< UGrpc::Service, ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>(
          std::mem_fn(&UGrpc::Service::RecordRoute), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      UGrpc_method_names[3],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< UGrpc::Service, ::uGrpc::EmbUArgs, ::uGrpc::EmbUResponse>(
          std::mem_fn(&UGrpc::Service::RouteChat), this)));
}

UGrpc::Service::~Service() {
}

::grpc::Status UGrpc::Service::GetUResponse(::grpc::ServerContext* context, const ::uGrpc::UArgs* request, ::uGrpc::UResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UGrpc::Service::ListUResponses(::grpc::ServerContext* context, const ::uGrpc::EmbUArgs* request, ::grpc::ServerWriter< ::uGrpc::UResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UGrpc::Service::RecordRoute(::grpc::ServerContext* context, ::grpc::ServerReader< ::uGrpc::EmbUArgs>* reader, ::uGrpc::EmbUResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UGrpc::Service::RouteChat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::uGrpc::EmbUResponse, ::uGrpc::EmbUArgs>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace uGrpc

